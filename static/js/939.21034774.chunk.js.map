{"version":3,"file":"static/js/939.21034774.chunk.js","mappings":"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","sources":["components/Banner.js","components/recipes/RecipeBanner.js","webpack://unstock---front/./src/components/recipes/recipeCard.module.css?27e8","components/recipes/RecipeCard.js","webpack://unstock---front/./src/components/recipes/RecipesGrid.module.css?ed20","components/recipes/RecipeGrid.js","components/recipes/recipeModal/MeasureDropdown.js","components/recipes/recipeModal/ProductForm.js","components/recipes/recipeModal/QuantitiesCard.js","components/recipes/recipeModal/AddedIngredients.js","components/recipes/recipeModal/CreateRecipeButton.js","components/recipes/recipeModal/SearchableMultiSelect.js","components/recipes/recipeModal/RecipeModal.js","components/recipes/Recipes.js","views/recipes/Recipes.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Banner = ({text}) => {\r\n  return (\r\n    <h1 className='text-center mb-3'>{text}</h1>\r\n  )\r\n}\r\n\r\nexport default Banner","import React, { useEffect, useState } from \"react\";\r\nimport { CCardBody, CCardHeader, CRow, CCol } from \"@coreui/react\";\r\n\r\nimport consumablesData from \"../../assets/consumables.json\";\r\n\r\nconst RecipeBanner = (props) => {\r\n  const { name, image, sell, type, ingredients, recipe, yields ,sellCost} = props.recipe;\r\n\r\n  function transformToSnakeCase(str) {\r\n    return str\r\n      .toLowerCase() // Convert to lowercase\r\n      .normalize(\"NFD\") // Normalize accented characters\r\n      .replace(/[\\u0300-\\u036f]/g, \"\") // Remove diacritical marks (accents)\r\n      .replace(/\\s+/g, \"_\"); // Replace spaces with underscores\r\n  }\r\n \r\n  const calculateIngredientCost = (ingredient) => {\r\n    const consumable = consumablesData.find(\r\n      (item) => item.name === transformToSnakeCase(ingredient.ingredient)\r\n    );\r\n    \r\n    if (consumable) { \r\n      const pricePerUnit =  parseFloat(consumable.price / consumable.quantity); \r\n      return pricePerUnit * ingredient.quantity;\r\n    }\r\n\r\n    return 0;  \r\n  };\r\n \r\n  const recipeCost = () => {\r\n    let total = 0;\r\n    ingredients.forEach((ingredient) => {\r\n      total += calculateIngredientCost(ingredient);\r\n      console.log(total)\r\n    });\r\n    return total;\r\n  };\r\n\r\n  const [recipeTotalCost, setRecipeTotalCost] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRecipeTotalCost(recipeCost());\r\n  }, [ingredients]); \r\n  \r\n  return (\r\n    <>\r\n      <CCardHeader>\r\n        <h5 className=\"text-center\">{name}</h5>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol xs=\"auto\" className=\"text-center\">\r\n            <img\r\n              style={{ maxHeight: \"40vh\", maxWidth: \"300px\" }}\r\n              src={image}\r\n              alt={name}\r\n            />\r\n          </CCol>\r\n          <CCol>\r\n            <CRow>\r\n              <h5>Descripción</h5>\r\n              <div className=\"col-6\">\r\n                <p>\r\n                  Cantidad de venta: {sell} {type}\r\n                </p>\r\n                <p>\r\n                  Rendimiento de receta: {yields} {type}\r\n                </p>\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <p>Precio de venta({sell} {type}): ${sellCost}</p>\r\n                <p>Costo de receta({yields} {type}): ${recipeTotalCost.toFixed(2)}</p>\r\n              </div>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <h5>Ingredientes</h5>\r\n                <ul className=\"mx-5\">\r\n                  {ingredients.map((ingredient, i) => (\r\n                    <li key={i}>\r\n                      {ingredient.quantity} {ingredient.measure} de{\" \"}\r\n                      {ingredient.ingredient}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <h5>Receta</h5>\r\n              <p>{recipe}</p>\r\n            </CRow>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipeBanner;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"recipeCard_card__FySoR\",\"recipeImage\":\"recipeCard_recipeImage__UlvYo\",\"midBar\":\"recipeCard_midBar__g3RCm\",\"circleIcon\":\"recipeCard_circleIcon__VywJ+\"};"," \r\nimport CIcon from \"@coreui/icons-react\";\r\nimport classes from \"./recipeCard.module.css\";\r\nimport { cilRestaurant } from \"@coreui/icons\";\r\n\r\nconst RecipeCard = (props) => {\r\n  const { name, image } = props.recipe;\r\n\r\n  return (\r\n    <div onClick={props.handleShowMore} className={classes.card}>\r\n    <h5>{name}</h5>\r\n    <div className={`bg-success ${classes.midBar} text-center`}>\r\n      <div>\r\n        <CIcon className={classes.circleIcon} icon={cilRestaurant} size={\"xxl\"} />\r\n      </div>\r\n    </div>\r\n    <img src={image} alt={name} className={`${classes.recipeImage}`} />\r\n  </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default RecipeCard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cardHeight\":\"RecipesGrid_cardHeight__zIZxe\",\"plusButton\":\"RecipesGrid_plusButton__pv6bp\"};","import React from \"react\";\r\nimport { CRow, CCol } from \"@coreui/react\";\r\nimport RecipeCard from \"./RecipeCard\";\r\nimport classes from \"./RecipesGrid.module.css\";\r\n\r\nconst RecipeGrid = (props) => {\r\n  return (\r\n    <CRow className={`${classes.cardHeight} overflow-auto `}>\r\n      {props.filteredData.map((recipe, index) => (\r\n        <CCol key={index} xs=\"12\" sm=\"6\" md=\"3\" className=\"  mb-4 text-center\">\r\n          <div className=\"w-100 ps-2\">\r\n            <RecipeCard\r\n              recipe={recipe}\r\n              handleShowMore={() => props.handleShowMore(index)}\r\n            />\r\n          </div>\r\n        </CCol>\r\n      ))}\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default RecipeGrid;\r\n","import React, { useState } from \"react\";\r\nimport { CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CFormLabel, CRow } from \"@coreui/react\";\r\n\r\nconst MeasureDropdown = ({ setType }) => {\r\n  const [medida, setMedida] = useState(\"\");\r\n  const options = [\r\n    { value: \"gr\", label: \"Gramos\" },\r\n    { value: \"ml\", label: \"Mililitros\" },\r\n    { value: \"piezas\", label: \"Piezas\" },\r\n  ];\r\n\r\n  const handleMeasure = (measure) => {\r\n    setMedida(measure.label); // Update the local state for display\r\n    setType(measure.value); // Pass the selected value back to ProductForm\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CFormLabel htmlFor=\"cantidad\">Cantidad:</CFormLabel>\r\n      </CRow>\r\n      <CRow>\r\n        <CDropdown id=\"cantidad\">\r\n          <CDropdownToggle >\r\n            {medida.length > 0 ? medida : \"Medida\"}\r\n          </CDropdownToggle>\r\n          <CDropdownMenu>\r\n            {options.map((option, i) => (\r\n              <CDropdownItem key={i} onClick={() => handleMeasure(option)}>\r\n                {option.label}\r\n              </CDropdownItem>\r\n            ))}\r\n          </CDropdownMenu>\r\n        </CDropdown>\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MeasureDropdown;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CFormInput, CFormLabel, CRow, CCol, CFormTextarea } from \"@coreui/react\";\r\nimport MeasureDropdown from \"./MeasureDropdown\"; // Assuming MeasureDropdown is correctly defined\r\n\r\nconst ProductForm = ({ checkCompletion, setProductData, productData }) => {\r\n  const [productName, setProductName] = useState(productData.productName || \"\");\r\n const [sellQuantity, setSellQuantity] = useState(productData.sellQuantity || \"\");\r\n  const [yieldRecipe, setYieldRecipe] = useState(productData.yieldRecipe || \"\");\r\n  const [image, setImage] = useState(productData.image || \"\");\r\n  const [recipe, setRecipe] = useState(productData.recipe || \"\");\r\n  const [sellCost, setSellCost] = useState(productData.sellCost || \"\");\r\n  const [type, setType] = useState(productData.type || \"\");\r\n\r\n  // Function to update product data in the parent component\r\n  const handleInputChange = () => {\r\n    const newProductData = {\r\n      productName,\r\n      sellQuantity,\r\n      yieldRecipe,\r\n      image,\r\n      recipe,\r\n      sellCost,\r\n      type,\r\n    };\r\n    setProductData(newProductData); // Update the product data in the parent component\r\n    checkCompletion(); // Notify parent about form changes\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleInputChange(); // On initial render or any change, update the parent\r\n  }, [productName, sellQuantity, yieldRecipe, image, recipe, sellCost, type]);\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol md=\"6\" className=\"mb-3\">\r\n        {/* Product Name */}\r\n        <CFormLabel htmlFor=\"name\">Nombre</CFormLabel>\r\n        <CFormInput\r\n          type=\"text\"\r\n          id=\"name\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n          placeholder=\"Nombre\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Sale Cost */}\r\n        <CFormLabel htmlFor=\"sellCost\">Costo de venta</CFormLabel>\r\n        <CFormInput\r\n          type=\"number\"\r\n          id=\"sellCost\"\r\n          value={sellCost}\r\n          min={0}\r\n          onChange={(e) => setSellCost(e.target.value)}\r\n          placeholder=\"Costo de venta\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Quantity and Type (Measurement dropdown) */}\r\n        <CRow>\r\n          <CCol>\r\n            <CFormLabel htmlFor=\"sell\">Cantidad de venta</CFormLabel>\r\n            <CFormInput\r\n              type=\"number\"\r\n              id=\"sell\"\r\n              min={0}\r\n              value={sellQuantity}\r\n              onChange={(e) => setSellQuantity(e.target.value)}\r\n              placeholder=\"Ej. 2\"\r\n              className=\"mb-3\"\r\n            />\r\n          </CCol>\r\n          <CCol>\r\n            <MeasureDropdown setType={setType} /> {/* Pass setType function */}\r\n          </CCol>\r\n        </CRow>\r\n\r\n     </CCol>\r\n\r\n      <CCol>\r\n        {/* Yield of Recipe */}\r\n        <CFormLabel htmlFor=\"yield\">Rendimiento de Receta</CFormLabel>\r\n        <CFormInput\r\n          type=\"number\"\r\n          id=\"yield\"\r\n          min={0}\r\n          value={yieldRecipe}\r\n          onChange={(e) => setYieldRecipe(e.target.value)}\r\n          placeholder=\"Rendimiento de Receta\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Image URL */}\r\n        <CFormLabel htmlFor=\"image\">Imagen</CFormLabel>\r\n        <CFormInput\r\n          type=\"text\"\r\n          id=\"image\"\r\n          value={image}\r\n          onChange={(e) => setImage(e.target.value)}\r\n          placeholder=\"Imagen URL\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Recipe Instructions */}\r\n        <CFormLabel htmlFor=\"recipe\">Receta</CFormLabel>\r\n        <CFormTextarea\r\n          id=\"recipe\"\r\n          value={recipe}\r\n          onChange={(e) => setRecipe(e.target.value)}\r\n          rows={3}\r\n          className=\"mb-3\"\r\n        />\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default ProductForm;\r\n","import React from \"react\";\r\nimport {  CFormInput, CRow } from \"@coreui/react\";\r\n\r\nconst QuantitiesCard = ({ ingredient, quantity, setQuantity, type ,handleInputChange}) => {\r\n  return (\r\n    <CRow>\r\n      <div className=\"col-8\">\r\n        <CFormInput\r\n          type=\"text\"\r\n          value={ingredient}\r\n          placeholder=\"Ingrediente\"\r\n          disabled\r\n          onChange={handleInputChange}\r\n        ></CFormInput>\r\n      </div>\r\n\r\n      <div className=\"col-4\">\r\n      <CRow>\r\n        <div className=\"col-8\">\r\n          <CFormInput\r\n            type=\"number\"\r\n            value={quantity}\r\n            onChange={(e) =>{ setQuantity(e.target.value)\r\n              handleInputChange()}}\r\n            placeholder=\"Cantidad\"\r\n          />\r\n        </div>\r\n        <div className=\"col-4\">\r\n          {type && <p className=\"pt-2\" >{type}</p>}\r\n        </div>\r\n      </CRow></div>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default QuantitiesCard;\r\n","// AddedIngredients.js\r\nimport React from 'react';\r\nimport { CCard, CCardBody, CCardHeader, CRow, CCol } from '@coreui/react';\r\n\r\nconst AddedIngredients = ({ addedIngredients }) => {\r\n  return (\r\n    <CRow className=\"mt-4\">\r\n      <CCol>\r\n        <CCard>\r\n          <CCardHeader>Ingredientes Añadidos</CCardHeader>\r\n          <CCardBody>\r\n            {addedIngredients.map((item, index) => (\r\n              <div key={index} className=\"mb-2\">\r\n                <strong>{item.ingredient}</strong> - {item.quantity} ({item.type})\r\n              </div>\r\n            ))}\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default AddedIngredients;\r\n","\r\nimport React from 'react';\r\nimport { CButton } from '@coreui/react';\r\n\r\nconst CreateRecipeButton = ({ onClick, isDisabled }) => {\r\n  return (\r\n    <CButton\r\n      className=\"btn\"\r\n      onClick={onClick}\r\n      disabled={isDisabled}\r\n    >\r\n      Crear receta\r\n    </CButton>\r\n  );\r\n};\r\n\r\nexport default CreateRecipeButton;\r\n","import React, {  useEffect, useState } from \"react\";\r\nconst SearchableMultiSelect = ({\r\n  options = [], // List of options to search from\r\n  renderItem,\r\n  onSelect,\r\n}) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [filteredResults, setFilteredResults] = useState([]);\r\n\r\n  // Filter results based on search input\r\n  useEffect(() => {\r\n    if (searchValue && searchValue.length > 1) {\r\n      const results = options.filter((item) =>\r\n        item.label.toLowerCase().includes(searchValue.toLowerCase())\r\n      );\r\n      setFilteredResults(results);\r\n    } else {\r\n      setFilteredResults([]);\r\n    }\r\n  }, [searchValue, options]);\r\n\r\n  const handleSelection = (selectedItem) => {\r\n    if (selectedItem) {\r\n      onSelect([selectedItem]); // Pass the selected item to the parent\r\n    }\r\n    setSearchValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"multi-select\">\r\n      <input\r\n        value={searchValue}\r\n        onChange={(e) => setSearchValue(e.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"Busca y selecciona\"\r\n      />\r\n      {filteredResults.length > 0 && (\r\n        <div className=\"results-dropdown\">\r\n          {filteredResults.map((item, index) => (\r\n            <div\r\n              key={index}\r\n              onClick={() => handleSelection(item)}\r\n              className=\"result-item\"\r\n            >\r\n              {renderItem(item)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchableMultiSelect;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalBody,\r\n  CContainer,\r\n  CButton,\r\n  CModalFooter,\r\n} from \"@coreui/react\";\r\nimport ProductForm from \"./ProductForm\";\r\nimport QuantitiesCard from \"./QuantitiesCard\";\r\nimport AddedIngredients from \"./AddedIngredients\";\r\nimport CreateRecipeButton from \"./CreateRecipeButton\";\r\nimport SearchableMultiSelect from \"./SearchableMultiSelect\";\r\nimport consumablesData from \"../../../assets/consumables.json\";\r\n\r\nconst RecipeModal = (props) => {\r\n  // State for ingredient, quantity, type, added ingredients, and product data\r\n  const [ingredient, setIngredient] = useState(\"\");\r\n  const [quantity, setQuantity] = useState(\"\"); // quantity (gr, ml, piezas)\r\n  const [type, setType] = useState(\"\"); // Ingredient type (piezas, etc.)\r\n  const [addedIngredients, setAddedIngredients] = useState([]);\r\n  const [productData, setProductData] = useState({\r\n    productName: \"\",\r\n    cost: \"\",\r\n    sellQuantity: \"\",\r\n    yieldRecipe: \"\",\r\n    image: \"\",\r\n    recipe: \"\",\r\n    sellCost: \"\",\r\n    type: \"\",\r\n  });\r\n  const [isAddButtonDisabled, setIsAddButtonDisabled] = useState(true); // Disabled state for \"Añadir\" button\r\n  const [isFormDisabled, setIsFormDisabled] = useState(true); // Disabled state for \"Crear receta\" button\r\n\r\n  // Handler for selecting ingredient from the search\r\n  const handleIngredientSelect = (selectedItems) => {\r\n    if (selectedItems && selectedItems.length > 0) {\r\n      const selectedItem = selectedItems[0];\r\n      setIngredient(selectedItem.label);\r\n      setType(selectedItem.type);\r\n    }\r\n  };\r\n\r\n  // Check if all necessary fields are filled to enable \"Añadir\" button\r\n  const handleInputChange = () => {\r\n    console.log(ingredient, quantity, type);\r\n    if (ingredient && quantity && type) {\r\n      setIsAddButtonDisabled(false); // Enable button if all fields are filled\r\n    } else {\r\n      setIsAddButtonDisabled(true); // Disable button if any field is missing\r\n    }\r\n  };\r\n\r\n  // Add ingredient to the added ingredients list\r\n  const handleAddIngredient = () => {\r\n    if (ingredient && quantity && type) {\r\n      const newIngredient = {\r\n        ingredient,\r\n        quantity,\r\n        type,\r\n      };\r\n      setAddedIngredients((prev) => [...prev, newIngredient]);\r\n\r\n      setIngredient(\"\"); // Reset ingredient selection\r\n      setQuantity(\"\"); // Reset quantity\r\n      setType(\"\"); // Reset type\r\n      setIsAddButtonDisabled(true); // Disable \"Añadir\" button again after adding\r\n    }\r\n  };\r\n\r\n  // Check if \"Crear Receta\" button should be enabled (all fields + ingredients)\r\n  const checkFormCompletion = () => {\r\n    return (\r\n      productData.productName !== \"\" &&\r\n      productData.cost > 0 &&\r\n      productData.type !== \"\" &&\r\n      productData.sellQuantity > 0 &&\r\n      productData.yieldRecipe > 0 &&\r\n      productData.image !== \"\" &&\r\n      productData.recipe !== \"\" &&\r\n      productData.sellCost > 0 &&\r\n      addedIngredients.length > 0\r\n    );\r\n  };\r\n\r\n  // Whenever addedIngredients or productData changes, check if the form is complete\r\n  useEffect(() => {\r\n    const formComplete = checkFormCompletion();\r\n    setIsFormDisabled(!formComplete); // Enable/disable \"Crear receta\" button based on form completion\r\n    handleInputChange();\r\n  }, [addedIngredients, productData, ingredient, quantity, type]); // Re-run when addedIngredients or productData change\r\n\r\n  // Gather all form data and pass it to parent component\r\n  const handleCreateRecipe = () => {\r\n    const newRecipe = {\r\n      id: Date.now(), // Simple way to generate a unique ID for the recipe\r\n      name: productData.productName,\r\n      image: productData.image, // Add image if it's part of the product data\r\n      recipe: productData.recipe,\r\n      ingredients: addedIngredients,\r\n      sell: productData.sellCost,\r\n      yields: productData.yieldRecipe,\r\n      type: productData.type,\r\n    };\r\n\r\n    // Pass the new recipe data to the parent component (Recipes)\r\n    props.onAddRecipe(newRecipe);\r\n    setAddedIngredients([]); // Reset added ingredients\r\n    props.closeModal(); // Close the modal after submitting\r\n  };\r\n\r\n  return (\r\n    <CModal\r\n      alignment=\"center\"\r\n      scrollable\r\n      size=\"xl\"\r\n      visible={props.visible}\r\n      onClose={() => {\r\n        props.closeModal();\r\n        setAddedIngredients([]); // Reset added ingredients when modal closes\r\n      }}\r\n      aria-labelledby=\"Ordenes\"\r\n    >\r\n      <CModalHeader>Productos</CModalHeader>\r\n      <CModalBody>\r\n        <CContainer>\r\n          {/* Product Form (ProductForm component) */}\r\n          <ProductForm\r\n            checkCompletion={checkFormCompletion}\r\n            setProductData={setProductData}\r\n            productData={productData} // Pass productData to ProductForm for updates\r\n          />\r\n\r\n          {/* Ingredient Selection */}\r\n          <div className=\"mb-3\">\r\n            <SearchableMultiSelect\r\n              options={consumablesData}\r\n              renderItem={(item) => <span>{item.label}</span>}\r\n              onSelect={handleIngredientSelect}\r\n            />\r\n          </div>\r\n\r\n          {/* Quantity and quantity */}\r\n          <div className=\"mb-3\">\r\n            <QuantitiesCard\r\n              ingredient={ingredient}\r\n              quantity={quantity}\r\n              setQuantity={setQuantity}\r\n              type={type}\r\n              handleInputChange={handleInputChange}\r\n            />\r\n          </div>\r\n\r\n          {/* Add Ingredient Button */}\r\n          <CButton\r\n            className=\"btn-dark\"\r\n            onClick={handleAddIngredient}\r\n            disabled={isAddButtonDisabled}\r\n          >\r\n            Añadir\r\n          </CButton>\r\n\r\n          {/* Clear Ingredients Button */}\r\n          <CButton\r\n            className=\"btn-dark ms-2\"\r\n            disabled={addedIngredients.length === 0}\r\n            onClick={() => {\r\n              setAddedIngredients([]); // Clear ingredients\r\n              setIsFormDisabled(true); // Disable \"Crear receta\" button\r\n            }}\r\n          >\r\n            Borrar\r\n          </CButton>\r\n\r\n          {/* Added Ingredients */}\r\n          {addedIngredients.length > 0 && (\r\n            <AddedIngredients addedIngredients={addedIngredients} />\r\n          )}\r\n        </CContainer>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        <CreateRecipeButton\r\n          onClick={handleCreateRecipe} // Use handleCreateRecipe to submit the recipe\r\n          isDisabled={isFormDisabled} // Disable button based on form completeness\r\n        />\r\n      </CModalFooter>\r\n    </CModal>\r\n  );\r\n};\r\n\r\nexport default RecipeModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport recipeExample from \"../../assets/recipes.json\";\r\nimport { CButton, CCard, CRow } from \"@coreui/react\";\r\nimport RecipeBanner from \"./RecipeBanner\";\r\nimport RecipeGrid from \"./RecipeGrid\";\r\nimport RecipeModal from \"./recipeModal/RecipeModal\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilPlus } from \"@coreui/icons\";\r\n\r\nconst Recipes = () => {\r\n  const [data, setData] = useState([]); // State to hold the recipes\r\n  const [searchInput, setSearchInput] = useState(\"\"); // For searching recipes\r\n  const [showIndex, setShowIndex] = useState(null); // Index for showing more details\r\n  const [isModalOpen, setModalOpen] = useState(false); // Modal open/close state\r\n\r\n  useEffect(() => {\r\n    setData(recipeExample.recipes); // Initialize with the example recipes\r\n  }, []);\r\n\r\n  const handleSearch = (ev) => {\r\n    setSearchInput(ev.target.value); // Update search input\r\n  };\r\n\r\n  const filteredData = data.filter((item) =>\r\n    item.name.toLowerCase().includes(searchInput.toLowerCase()) // Filter recipes by name\r\n  );\r\n\r\n  const openModal = () => {\r\n    setModalOpen(true); // Open modal to add a new recipe\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false); // Close modal\r\n  };\r\n\r\n  // Function to handle the addition of a new recipe\r\n  const handleAddRecipe = (newRecipe) => {\r\n    setData((prevData) => [...prevData, newRecipe]); // Add new recipe to the existing data\r\n    closeModal(); // Close modal after adding the recipe\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CCard className=\"mb-3 px-2\">\r\n        <CRow>\r\n          <div className=\"col mt-5 ms-4\">\r\n            <label htmlFor=\"search\">Buscar Receta:</label>\r\n            <input\r\n              id=\"search\"\r\n              type=\"text\"\r\n              placeholder=\"Buscar receta\"\r\n              value={searchInput}\r\n              onChange={handleSearch}\r\n              className=\"ms-3\"\r\n            />\r\n          </div>\r\n          <div className=\"col-3 mt-4\" >\r\n            <CButton className=\"text-middle btn-dark\"  onClick={openModal}>\r\n              <CIcon icon={cilPlus} />\r\n              <p>Añadir Receta</p>\r\n            </CButton>\r\n          </div>\r\n          <div className=\"px-4\">\r\n            <hr />\r\n          </div>\r\n        </CRow>\r\n        {filteredData.length !== 0 ? (\r\n          <RecipeGrid handleShowMore={setShowIndex} filteredData={filteredData} />\r\n        ) : (\r\n          <h3 className=\"text-center m-5\">No hay recetas para mostrar </h3>\r\n        )}\r\n      </CCard>\r\n      <RecipeModal visible={isModalOpen} closeModal={closeModal} onAddRecipe={handleAddRecipe} />\r\n      {showIndex != null && (\r\n        <CCard>\r\n          <RecipeBanner recipe={data[showIndex]} />\r\n        </CCard>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React from 'react'\r\nimport RecipesComponent from '../../components/recipes/Recipes'\r\nimport Banner from '../../components/Banner'\r\n\r\nconst Recipes = () => {\r\n  return (\r\n    <>\r\n        <Banner text= \"Recetas\"/>\r\n        <RecipesComponent/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Recipes"],"names":["_ref","text","_jsx","className","children","props","name","image","sell","type","ingredients","recipe","yields","sellCost","recipeCost","total","forEach","ingredient","consumable","consumablesData","find","item","toLowerCase","normalize","replace","parseFloat","price","quantity","calculateIngredientCost","console","log","recipeTotalCost","setRecipeTotalCost","useState","useEffect","_jsxs","_Fragment","CCardHeader","CCardBody","CRow","CCol","xs","style","maxHeight","maxWidth","src","alt","toFixed","map","i","measure","onClick","handleShowMore","classes","CIcon","icon","cilRestaurant","size","filteredData","index","sm","md","RecipeCard","setType","medida","setMedida","CFormLabel","htmlFor","CDropdown","id","CDropdownToggle","length","CDropdownMenu","value","label","option","CDropdownItem","handleMeasure","checkCompletion","setProductData","productData","productName","setProductName","sellQuantity","setSellQuantity","yieldRecipe","setYieldRecipe","setImage","setRecipe","setSellCost","CFormInput","onChange","e","target","placeholder","min","MeasureDropdown","CFormTextarea","rows","setQuantity","handleInputChange","disabled","addedIngredients","CCard","isDisabled","CButton","options","renderItem","onSelect","searchValue","setSearchValue","filteredResults","setFilteredResults","results","filter","includes","handleSelection","selectedItem","setIngredient","setAddedIngredients","cost","isAddButtonDisabled","setIsAddButtonDisabled","isFormDisabled","setIsFormDisabled","checkFormCompletion","formComplete","CModal","alignment","scrollable","visible","onClose","closeModal","CModalHeader","CModalBody","CContainer","ProductForm","SearchableMultiSelect","selectedItems","QuantitiesCard","handleAddIngredient","newIngredient","prev","AddedIngredients","CModalFooter","CreateRecipeButton","handleCreateRecipe","newRecipe","Date","now","onAddRecipe","Recipes","data","setData","searchInput","setSearchInput","showIndex","setShowIndex","isModalOpen","setModalOpen","recipeExample","ev","openModal","cilPlus","RecipeGrid","RecipeModal","prevData","RecipeBanner","Banner","RecipesComponent"],"sourceRoot":""}