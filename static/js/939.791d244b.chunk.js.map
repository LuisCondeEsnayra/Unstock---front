{"version":3,"file":"static/js/939.791d244b.chunk.js","mappings":"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","sources":["components/Banner.js","components/recipes/RecipeBanner.js","webpack://unstock---front/./src/components/recipes/recipeCard.module.css?27e8","components/recipes/RecipeCard.js","webpack://unstock---front/./src/components/recipes/RecipesGrid.module.css?ed20","components/recipes/RecipeGrid.js","components/recipes/recipeModal/MeasureDropdown.js","components/recipes/recipeModal/ProductForm.js","components/recipes/recipeModal/QuantitiesCard.js","components/recipes/recipeModal/AddedIngredients.js","components/recipes/recipeModal/CreateRecipeButton.js","components/recipes/recipeModal/SearchableMultiSelect.js","components/recipes/recipeModal/RecipeModal.js","components/recipes/Recipes.js","views/recipes/Recipes.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Banner = ({text}) => {\r\n  return (\r\n    <h1 className='text-center mb-3'>{text}</h1>\r\n  )\r\n}\r\n\r\nexport default Banner","import React from \"react\";\r\nimport { CCardBody, CCardHeader, CRow, CCol } from \"@coreui/react\";\r\n\r\nconst RecipeBanner = (props) => {\r\n  const { name, image, sell, type, ingredients, recipe } = props.recipe;\r\n  return (\r\n    <>\r\n      <CCardHeader>\r\n        <h5 className=\"text-center\">{name}</h5>\r\n      </CCardHeader>\r\n      <CCardBody>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol xs=\"auto\" className=\"text-center\">\r\n            <img\r\n              style={{ maxHeight: \"40vh\", maxWidth: \"300px\" }}\r\n              src={image}\r\n              alt={name}\r\n            />\r\n          </CCol>\r\n          <CCol>\r\n            <CRow>\r\n              <h5>Descripción</h5>\r\n              <p>\r\n                Cantidad de venta: {sell} {type}\r\n              </p>\r\n              <p>\r\n                Rendimiento de receta: {sell} {type}\r\n              </p>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <h5>Ingredientes</h5>\r\n                <ul className=\"mx-5\">\r\n                  {ingredients.map((ingredient, i) => (\r\n                    <li key={i}>\r\n                      {ingredient.quantity} {ingredient.measure} de{\" \"}\r\n                      {ingredient.ingredient}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <h5>Receta</h5>\r\n              <p>{recipe}</p>\r\n            </CRow>\r\n          </CCol>\r\n        </CRow>\r\n      </CCardBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecipeBanner;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"recipeImage\":\"recipeCard_recipeImage__UlvYo\"};"," \r\nimport classes from \"./recipeCard.module.css\";\r\n\r\nconst RecipeCard = (props) => {\r\n  const { name, image } = props.recipe;\r\n\r\n  return (\r\n    <div onClick={props.handleShowMore}>\r\n      <h5>{name}</h5>\r\n      <img src={image} alt={name} className={`${classes.recipeImage}  `} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeCard;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cardHeight\":\"RecipesGrid_cardHeight__zIZxe\",\"plusButton\":\"RecipesGrid_plusButton__pv6bp\"};","import React from \"react\";\r\nimport { CRow, CCol } from \"@coreui/react\";\r\nimport RecipeCard from \"./RecipeCard\";\r\nimport classes from \"./RecipesGrid.module.css\";\r\n\r\nconst RecipeGrid = (props) => {\r\n  return (\r\n    <CRow className={`${classes.cardHeight} overflow-auto `}>\r\n      {props.filteredData.map((recipe, index) => (\r\n        <CCol key={index} xs=\"12\" sm=\"6\" md=\"3\" className=\"  mb-4 text-center\">\r\n          <div className=\"w-100 ps-2\">\r\n            <RecipeCard\r\n              recipe={recipe}\r\n              handleShowMore={() => props.handleShowMore(index)}\r\n            />\r\n          </div>\r\n        </CCol>\r\n      ))}\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default RecipeGrid;\r\n","import React, { useState } from \"react\";\r\nimport { CDropdown, CDropdownToggle, CDropdownMenu, CDropdownItem, CFormLabel, CRow } from \"@coreui/react\";\r\n\r\nconst MeasureDropdown = ({ setType }) => {\r\n  const [medida, setMedida] = useState(\"\");\r\n  const options = [\r\n    { value: \"gr\", label: \"Gramos\" },\r\n    { value: \"ml\", label: \"Mililitros\" },\r\n    { value: \"piezas\", label: \"Piezas\" },\r\n  ];\r\n\r\n  const handleMeasure = (measure) => {\r\n    setMedida(measure.label); // Update the local state for display\r\n    setType(measure.value); // Pass the selected value back to ProductForm\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CFormLabel htmlFor=\"cantidad\">Cantidad:</CFormLabel>\r\n      </CRow>\r\n      <CRow>\r\n        <CDropdown id=\"cantidad\">\r\n          <CDropdownToggle >\r\n            {medida.length > 0 ? medida : \"Medida\"}\r\n          </CDropdownToggle>\r\n          <CDropdownMenu>\r\n            {options.map((option, i) => (\r\n              <CDropdownItem key={i} onClick={() => handleMeasure(option)}>\r\n                {option.label}\r\n              </CDropdownItem>\r\n            ))}\r\n          </CDropdownMenu>\r\n        </CDropdown>\r\n      </CRow>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MeasureDropdown;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CFormInput, CFormLabel, CRow, CCol, CFormTextarea } from \"@coreui/react\";\r\nimport MeasureDropdown from \"./MeasureDropdown\"; // Assuming MeasureDropdown is correctly defined\r\n\r\nconst ProductForm = ({ checkCompletion, setProductData, productData }) => {\r\n  const [productName, setProductName] = useState(productData.productName || \"\");\r\n  const [cost, setCost] = useState(productData.cost || \"\");\r\n  const [sellQuantity, setSellQuantity] = useState(productData.sellQuantity || \"\");\r\n  const [yieldRecipe, setYieldRecipe] = useState(productData.yieldRecipe || \"\");\r\n  const [image, setImage] = useState(productData.image || \"\");\r\n  const [recipe, setRecipe] = useState(productData.recipe || \"\");\r\n  const [sellCost, setSellCost] = useState(productData.sellCost || \"\");\r\n  const [type, setType] = useState(productData.type || \"\");\r\n\r\n  // Function to update product data in the parent component\r\n  const handleInputChange = () => {\r\n    const newProductData = {\r\n      productName,\r\n      cost,\r\n      sellQuantity,\r\n      yieldRecipe,\r\n      image,\r\n      recipe,\r\n      sellCost,\r\n      type,\r\n    };\r\n    setProductData(newProductData); // Update the product data in the parent component\r\n    checkCompletion(); // Notify parent about form changes\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleInputChange(); // On initial render or any change, update the parent\r\n  }, [productName, cost, sellQuantity, yieldRecipe, image, recipe, sellCost, type]);\r\n\r\n  return (\r\n    <CRow>\r\n      <CCol md=\"6\" className=\"mb-3\">\r\n        {/* Product Name */}\r\n        <CFormLabel htmlFor=\"name\">Nombre</CFormLabel>\r\n        <CFormInput\r\n          type=\"text\"\r\n          id=\"name\"\r\n          value={productName}\r\n          onChange={(e) => setProductName(e.target.value)}\r\n          placeholder=\"Nombre\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Sale Cost */}\r\n        <CFormLabel htmlFor=\"sellCost\">Costo de venta</CFormLabel>\r\n        <CFormInput\r\n          type=\"number\"\r\n          id=\"sellCost\"\r\n          value={sellCost}\r\n          min={0}\r\n          onChange={(e) => setSellCost(e.target.value)}\r\n          placeholder=\"Costo de venta\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Quantity and Type (Measurement dropdown) */}\r\n        <CRow>\r\n          <CCol>\r\n            <CFormLabel htmlFor=\"sell\">Cantidad de venta</CFormLabel>\r\n            <CFormInput\r\n              type=\"number\"\r\n              id=\"sell\"\r\n              min={0}\r\n              value={sellQuantity}\r\n              onChange={(e) => setSellQuantity(e.target.value)}\r\n              placeholder=\"Ej. 2\"\r\n              className=\"mb-3\"\r\n            />\r\n          </CCol>\r\n          <CCol>\r\n            <MeasureDropdown setType={setType} /> {/* Pass setType function */}\r\n          </CCol>\r\n        </CRow>\r\n\r\n        {/* Sell Cost */}\r\n        <CFormLabel htmlFor=\"cost\">Costo</CFormLabel>\r\n        <CFormInput\r\n          type=\"number\"\r\n          id=\"cost\"\r\n          value={cost}\r\n          min={0}\r\n          onChange={(e) => setCost(e.target.value)}\r\n          placeholder=\"Costo\"\r\n          className=\"mb-3\"\r\n        />\r\n      </CCol>\r\n\r\n      <CCol>\r\n        {/* Yield of Recipe */}\r\n        <CFormLabel htmlFor=\"yield\">Rendimiento de Receta</CFormLabel>\r\n        <CFormInput\r\n          type=\"number\"\r\n          id=\"yield\"\r\n          min={0}\r\n          value={yieldRecipe}\r\n          onChange={(e) => setYieldRecipe(e.target.value)}\r\n          placeholder=\"Rendimiento de Receta\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Image URL */}\r\n        <CFormLabel htmlFor=\"image\">Imagen</CFormLabel>\r\n        <CFormInput\r\n          type=\"text\"\r\n          id=\"image\"\r\n          value={image}\r\n          onChange={(e) => setImage(e.target.value)}\r\n          placeholder=\"Imagen URL\"\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {/* Recipe Instructions */}\r\n        <CFormLabel htmlFor=\"recipe\">Receta</CFormLabel>\r\n        <CFormTextarea\r\n          id=\"recipe\"\r\n          value={recipe}\r\n          onChange={(e) => setRecipe(e.target.value)}\r\n          rows={3}\r\n          className=\"mb-3\"\r\n        />\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default ProductForm;\r\n","import React from \"react\";\r\nimport {  CFormInput, CRow } from \"@coreui/react\";\r\n\r\nconst QuantitiesCard = ({ ingredient, quantity, setQuantity, type ,handleInputChange}) => {\r\n  return (\r\n    <CRow>\r\n      <div className=\"col-8\">\r\n        <CFormInput\r\n          type=\"text\"\r\n          value={ingredient}\r\n          placeholder=\"Ingrediente\"\r\n          disabled\r\n          onChange={handleInputChange}\r\n        ></CFormInput>\r\n      </div>\r\n\r\n      <div className=\"col-4\">\r\n      <CRow>\r\n        <div className=\"col-8\">\r\n          <CFormInput\r\n            type=\"number\"\r\n            value={quantity}\r\n            onChange={(e) =>{ setQuantity(e.target.value)\r\n              handleInputChange()}}\r\n            placeholder=\"Cantidad\"\r\n          />\r\n        </div>\r\n        <div className=\"col-4\">\r\n          {type && <p className=\"pt-2\" >{type}</p>}\r\n        </div>\r\n      </CRow></div>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default QuantitiesCard;\r\n","// AddedIngredients.js\r\nimport React from 'react';\r\nimport { CCard, CCardBody, CCardHeader, CRow, CCol } from '@coreui/react';\r\n\r\nconst AddedIngredients = ({ addedIngredients }) => {\r\n  return (\r\n    <CRow className=\"mt-4\">\r\n      <CCol>\r\n        <CCard>\r\n          <CCardHeader>Ingredientes Añadidos</CCardHeader>\r\n          <CCardBody>\r\n            {addedIngredients.map((item, index) => (\r\n              <div key={index} className=\"mb-2\">\r\n                <strong>{item.ingredient}</strong> - {item.quantity} ({item.type})\r\n              </div>\r\n            ))}\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default AddedIngredients;\r\n","\r\nimport React from 'react';\r\nimport { CButton } from '@coreui/react';\r\n\r\nconst CreateRecipeButton = ({ onClick, isDisabled }) => {\r\n  return (\r\n    <CButton\r\n      className=\"btn\"\r\n      onClick={onClick}\r\n      disabled={isDisabled}\r\n    >\r\n      Crear receta\r\n    </CButton>\r\n  );\r\n};\r\n\r\nexport default CreateRecipeButton;\r\n","import React, {  useEffect, useState } from \"react\";\r\nconst SearchableMultiSelect = ({\r\n  options = [], // List of options to search from\r\n  renderItem,\r\n  onSelect,\r\n}) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [filteredResults, setFilteredResults] = useState([]);\r\n\r\n  // Filter results based on search input\r\n  useEffect(() => {\r\n    if (searchValue && searchValue.length > 1) {\r\n      const results = options.filter((item) =>\r\n        item.label.toLowerCase().includes(searchValue.toLowerCase())\r\n      );\r\n      setFilteredResults(results);\r\n    } else {\r\n      setFilteredResults([]);\r\n    }\r\n  }, [searchValue, options]);\r\n\r\n  const handleSelection = (selectedItem) => {\r\n    if (selectedItem) {\r\n      onSelect([selectedItem]); // Pass the selected item to the parent\r\n    }\r\n    setSearchValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"multi-select\">\r\n      <input\r\n        value={searchValue}\r\n        onChange={(e) => setSearchValue(e.target.value)}\r\n        type=\"text\"\r\n        placeholder=\"Busca y selecciona\"\r\n      />\r\n      {filteredResults.length > 0 && (\r\n        <div className=\"results-dropdown\">\r\n          {filteredResults.map((item, index) => (\r\n            <div\r\n              key={index}\r\n              onClick={() => handleSelection(item)}\r\n              className=\"result-item\"\r\n            >\r\n              {renderItem(item)}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchableMultiSelect;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalBody,\r\n  CContainer,\r\n  CButton,\r\n  CModalFooter,\r\n} from \"@coreui/react\";\r\nimport ProductForm from \"./ProductForm\";\r\nimport QuantitiesCard from \"./QuantitiesCard\";\r\nimport AddedIngredients from \"./AddedIngredients\";\r\nimport CreateRecipeButton from \"./CreateRecipeButton\";\r\nimport SearchableMultiSelect from \"./SearchableMultiSelect\";\r\nimport consumablesData from \"../../../assets/consumables.json\";\r\n\r\nconst RecipeModal = (props) => {\r\n  // State for ingredient, quantity, type, added ingredients, and product data\r\n  const [ingredient, setIngredient] = useState(\"\");\r\n  const [quantity, setQuantity] = useState(\"\"); // quantity (gr, ml, piezas)\r\n  const [type, setType] = useState(\"\"); // Ingredient type (piezas, etc.)\r\n  const [addedIngredients, setAddedIngredients] = useState([]);\r\n  const [productData, setProductData] = useState({\r\n    productName: \"\",\r\n    cost: \"\",\r\n    sellQuantity: \"\",\r\n    yieldRecipe: \"\",\r\n    image: \"\",\r\n    recipe: \"\",\r\n    sellCost: \"\",\r\n    type: \"\",\r\n  });\r\n  const [isAddButtonDisabled, setIsAddButtonDisabled] = useState(true); // Disabled state for \"Añadir\" button\r\n  const [isFormDisabled, setIsFormDisabled] = useState(true); // Disabled state for \"Crear receta\" button\r\n\r\n  // Handler for selecting ingredient from the search\r\n  const handleIngredientSelect = (selectedItems) => {\r\n    if (selectedItems && selectedItems.length > 0) {\r\n      const selectedItem = selectedItems[0];\r\n      setIngredient(selectedItem.label);\r\n      setType(selectedItem.type);\r\n    }\r\n  };\r\n\r\n  // Check if all necessary fields are filled to enable \"Añadir\" button\r\n  const handleInputChange = () => {\r\n    console.log(ingredient, quantity, type);\r\n    if (ingredient && quantity && type) {\r\n      setIsAddButtonDisabled(false); // Enable button if all fields are filled\r\n    } else {\r\n      setIsAddButtonDisabled(true); // Disable button if any field is missing\r\n    }\r\n  };\r\n\r\n  // Add ingredient to the added ingredients list\r\n  const handleAddIngredient = () => {\r\n    if (ingredient && quantity && type) {\r\n      const newIngredient = {\r\n        ingredient,\r\n        quantity,\r\n        type,\r\n      };\r\n      setAddedIngredients((prev) => [...prev, newIngredient]);\r\n\r\n      setIngredient(\"\"); // Reset ingredient selection\r\n      setQuantity(\"\"); // Reset quantity\r\n      setType(\"\"); // Reset type\r\n      setIsAddButtonDisabled(true); // Disable \"Añadir\" button again after adding\r\n    }\r\n  };\r\n\r\n  // Check if \"Crear Receta\" button should be enabled (all fields + ingredients)\r\n  const checkFormCompletion = () => {\r\n    return (\r\n      productData.productName !== \"\" &&\r\n      productData.cost > 0 &&\r\n      productData.type !== \"\" &&\r\n      productData.sellQuantity > 0 &&\r\n      productData.yieldRecipe > 0 &&\r\n      productData.image !== \"\" &&\r\n      productData.recipe !== \"\" &&\r\n      productData.sellCost > 0 &&\r\n      addedIngredients.length > 0\r\n    );\r\n  };\r\n\r\n  // Whenever addedIngredients or productData changes, check if the form is complete\r\n  useEffect(() => {\r\n    const formComplete = checkFormCompletion();\r\n    setIsFormDisabled(!formComplete); // Enable/disable \"Crear receta\" button based on form completion\r\n    handleInputChange();\r\n  }, [addedIngredients, productData, ingredient, quantity, type]); // Re-run when addedIngredients or productData change\r\n\r\n  // Gather all form data and pass it to parent component\r\n  const handleCreateRecipe = () => {\r\n    const newRecipe = {\r\n      id: Date.now(), // Simple way to generate a unique ID for the recipe\r\n      name: productData.productName,\r\n      image: productData.image, // Add image if it's part of the product data\r\n      recipe: productData.recipe,\r\n      ingredients: addedIngredients,\r\n      sell: productData.sellCost,\r\n      yields: productData.yieldRecipe,\r\n      type: productData.type,\r\n    };\r\n\r\n    // Pass the new recipe data to the parent component (Recipes)\r\n    props.onAddRecipe(newRecipe);\r\n    setAddedIngredients([]); // Reset added ingredients\r\n    props.closeModal(); // Close the modal after submitting\r\n  };\r\n\r\n  return (\r\n    <CModal\r\n      alignment=\"center\"\r\n      scrollable\r\n      size=\"xl\"\r\n      visible={props.visible}\r\n      onClose={() => {\r\n        props.closeModal();\r\n        setAddedIngredients([]); // Reset added ingredients when modal closes\r\n      }}\r\n      aria-labelledby=\"Ordenes\"\r\n    >\r\n      <CModalHeader>Productos</CModalHeader>\r\n      <CModalBody>\r\n        <CContainer>\r\n          {/* Product Form (ProductForm component) */}\r\n          <ProductForm\r\n            checkCompletion={checkFormCompletion}\r\n            setProductData={setProductData}\r\n            productData={productData} // Pass productData to ProductForm for updates\r\n          />\r\n\r\n          {/* Ingredient Selection */}\r\n          <div className=\"mb-3\">\r\n            <SearchableMultiSelect\r\n              options={consumablesData}\r\n              renderItem={(item) => <span>{item.label}</span>}\r\n              onSelect={handleIngredientSelect}\r\n            />\r\n          </div>\r\n\r\n          {/* Quantity and quantity */}\r\n          <div className=\"mb-3\">\r\n            <QuantitiesCard\r\n              ingredient={ingredient}\r\n              quantity={quantity}\r\n              setQuantity={setQuantity}\r\n              type={type}\r\n              handleInputChange={handleInputChange}\r\n            />\r\n          </div>\r\n\r\n          {/* Add Ingredient Button */}\r\n          <CButton\r\n            className=\"btn-dark\"\r\n            onClick={handleAddIngredient}\r\n            disabled={isAddButtonDisabled}\r\n          >\r\n            Añadir\r\n          </CButton>\r\n\r\n          {/* Clear Ingredients Button */}\r\n          <CButton\r\n            className=\"btn-dark ms-2\"\r\n            disabled={addedIngredients.length === 0}\r\n            onClick={() => {\r\n              setAddedIngredients([]); // Clear ingredients\r\n              setIsFormDisabled(true); // Disable \"Crear receta\" button\r\n            }}\r\n          >\r\n            Borrar\r\n          </CButton>\r\n\r\n          {/* Added Ingredients */}\r\n          {addedIngredients.length > 0 && (\r\n            <AddedIngredients addedIngredients={addedIngredients} />\r\n          )}\r\n        </CContainer>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        <CreateRecipeButton\r\n          onClick={handleCreateRecipe} // Use handleCreateRecipe to submit the recipe\r\n          isDisabled={isFormDisabled} // Disable button based on form completeness\r\n        />\r\n      </CModalFooter>\r\n    </CModal>\r\n  );\r\n};\r\n\r\nexport default RecipeModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport recipeExample from \"../../assets/recipes.json\";\r\nimport { CButton, CCard, CRow } from \"@coreui/react\";\r\nimport RecipeBanner from \"./RecipeBanner\";\r\nimport RecipeGrid from \"./RecipeGrid\";\r\nimport RecipeModal from \"./recipeModal/RecipeModal\";\r\nimport CIcon from \"@coreui/icons-react\";\r\nimport { cilPlus } from \"@coreui/icons\";\r\n\r\nconst Recipes = () => {\r\n  const [data, setData] = useState([]); // State to hold the recipes\r\n  const [searchInput, setSearchInput] = useState(\"\"); // For searching recipes\r\n  const [showIndex, setShowIndex] = useState(null); // Index for showing more details\r\n  const [isModalOpen, setModalOpen] = useState(false); // Modal open/close state\r\n\r\n  useEffect(() => {\r\n    setData(recipeExample.recipes); // Initialize with the example recipes\r\n  }, []);\r\n\r\n  const handleSearch = (ev) => {\r\n    setSearchInput(ev.target.value); // Update search input\r\n  };\r\n\r\n  const filteredData = data.filter((item) =>\r\n    item.name.toLowerCase().includes(searchInput.toLowerCase()) // Filter recipes by name\r\n  );\r\n\r\n  const openModal = () => {\r\n    setModalOpen(true); // Open modal to add a new recipe\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalOpen(false); // Close modal\r\n  };\r\n\r\n  // Function to handle the addition of a new recipe\r\n  const handleAddRecipe = (newRecipe) => {\r\n    setData((prevData) => [...prevData, newRecipe]); // Add new recipe to the existing data\r\n    closeModal(); // Close modal after adding the recipe\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CCard className=\"mb-3 px-2\">\r\n        <CRow>\r\n          <div className=\"col mt-5 ms-4\">\r\n            <label htmlFor=\"search\">Buscar Receta:</label>\r\n            <input\r\n              id=\"search\"\r\n              type=\"text\"\r\n              placeholder=\"Buscar receta\"\r\n              value={searchInput}\r\n              onChange={handleSearch}\r\n              className=\"ms-3\"\r\n            />\r\n          </div>\r\n          <div className=\"col-3 mt-4\">\r\n            <CButton className=\"text-middle\" onClick={openModal}>\r\n              <CIcon icon={cilPlus} />\r\n              <p>Añadir Receta</p>\r\n            </CButton>\r\n          </div>\r\n          <div className=\"px-4\">\r\n            <hr />\r\n          </div>\r\n        </CRow>\r\n        {filteredData.length !== 0 ? (\r\n          <RecipeGrid handleShowMore={setShowIndex} filteredData={filteredData} />\r\n        ) : (\r\n          <h3 className=\"text-center m-5\">No hay recetas para mostrar </h3>\r\n        )}\r\n      </CCard>\r\n      <RecipeModal visible={isModalOpen} closeModal={closeModal} onAddRecipe={handleAddRecipe} />\r\n      {showIndex != null && (\r\n        <CCard>\r\n          <RecipeBanner recipe={data[showIndex]} />\r\n        </CCard>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React from 'react'\r\nimport RecipesComponent from '../../components/recipes/Recipes'\r\nimport Banner from '../../components/Banner'\r\n\r\nconst Recipes = () => {\r\n  return (\r\n    <>\r\n        <Banner text= \"Recetas\"/>\r\n        <RecipesComponent/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Recipes"],"names":["_ref","text","_jsx","className","children","props","name","image","sell","type","ingredients","recipe","_jsxs","_Fragment","CCardHeader","CCardBody","CRow","CCol","xs","style","maxHeight","maxWidth","src","alt","map","ingredient","i","quantity","measure","onClick","handleShowMore","classes","filteredData","index","sm","md","RecipeCard","setType","medida","setMedida","useState","CFormLabel","htmlFor","CDropdown","id","CDropdownToggle","length","CDropdownMenu","value","label","option","CDropdownItem","handleMeasure","checkCompletion","setProductData","productData","productName","setProductName","cost","setCost","sellQuantity","setSellQuantity","yieldRecipe","setYieldRecipe","setImage","setRecipe","sellCost","setSellCost","useEffect","CFormInput","onChange","e","target","placeholder","min","MeasureDropdown","CFormTextarea","rows","setQuantity","handleInputChange","disabled","addedIngredients","CCard","item","isDisabled","CButton","options","renderItem","onSelect","searchValue","setSearchValue","filteredResults","setFilteredResults","results","filter","toLowerCase","includes","handleSelection","selectedItem","setIngredient","setAddedIngredients","isAddButtonDisabled","setIsAddButtonDisabled","isFormDisabled","setIsFormDisabled","console","log","checkFormCompletion","formComplete","CModal","alignment","scrollable","size","visible","onClose","closeModal","CModalHeader","CModalBody","CContainer","ProductForm","SearchableMultiSelect","consumablesData","selectedItems","QuantitiesCard","handleAddIngredient","newIngredient","prev","AddedIngredients","CModalFooter","CreateRecipeButton","handleCreateRecipe","newRecipe","Date","now","yields","onAddRecipe","Recipes","data","setData","searchInput","setSearchInput","showIndex","setShowIndex","isModalOpen","setModalOpen","recipeExample","ev","openModal","CIcon","icon","cilPlus","RecipeGrid","RecipeModal","prevData","RecipeBanner","Banner","RecipesComponent"],"sourceRoot":""}