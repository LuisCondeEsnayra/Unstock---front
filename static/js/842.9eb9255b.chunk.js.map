{"version":3,"file":"static/js/842.9eb9255b.chunk.js","mappings":"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","sources":["components/Banner.js","webpack://unstock---front/./src/components/Pagination.module.css?18ff","components/Pagination.js","components/consumables/Consumables.js","views/consumables/ConsumablesView.js","../node_modules/@coreui/react/src/components/card/CCard.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nconst Banner = ({text}) => {\r\n  return (\r\n    <h1 className='text-center mb-3'>{text}</h1>\r\n  )\r\n}\r\n\r\nexport default Banner","// extracted by mini-css-extract-plugin\nexport default {\"pagination\":\"Pagination_pagination__oh8i4\",\"active\":\"Pagination_active__W8u6H\"};","import classes from './Pagination.module.css';\r\n\r\nconst Pagination = ({ currentPage, totalPages, onPageChange }) => {\r\n    return (\r\n        <div className={classes.pagination}>\r\n            <button \r\n                onClick={() => onPageChange(1)} \r\n                disabled={currentPage === 1}\r\n            >\r\n                First\r\n            </button>\r\n            <button \r\n                onClick={() => onPageChange(currentPage - 1)} \r\n                disabled={currentPage === 1}\r\n            >\r\n                Previous\r\n            </button>\r\n            {[...Array(totalPages)].map((_, index) => (\r\n                <button \r\n                    key={index} \r\n                    onClick={() => onPageChange(index + 1)} \r\n                    className={currentPage === index + 1 ? classes.active : ''}\r\n                >\r\n                    {index + 1}\r\n                </button>\r\n            ))}\r\n            <button \r\n                onClick={() => onPageChange(currentPage + 1)} \r\n                disabled={currentPage === totalPages}\r\n            >\r\n                Next\r\n            </button>\r\n            <button \r\n                onClick={() => onPageChange(totalPages)} \r\n                disabled={currentPage === totalPages}\r\n            >\r\n                Last\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\nexport default Pagination;","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CCard,\r\n  CProgress,\r\n  CPagination,\r\n  CTable,\r\n  CTableBody,\r\n  CTableDataCell,\r\n  CTableHead,\r\n  CTableHeaderCell,\r\n  CFormInput,\r\n  CTableRow,\r\n  CButton,\r\n} from \"@coreui/react\";\r\nimport consumablesData from \"../../assets/consumables.json\";\r\nimport Pagination from \"../Pagination\";\r\n\r\nconst Consumables = () => {\r\n  const [data, setData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [sortConfig, setSortConfig] = useState({\r\n    key: \"name\",\r\n    direction: \"ascending\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setData(consumablesData);\r\n  }, []);\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const filteredData = data.filter(\r\n    (item) =>\r\n      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      item.provider.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const handleSort = (key) => {\r\n    let direction = \"ascending\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n      direction = \"descending\";\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const sortedData = filteredData.sort((a, b) => {\r\n    if (a[sortConfig.key] < b[sortConfig.key]) {\r\n      return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n    }\r\n    if (a[sortConfig.key] > b[sortConfig.key]) {\r\n      return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n  const currentItems = sortedData.slice(indexOfFirstItem, indexOfLastItem);\r\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n  const translations = {\r\n    label: \"nombre\",\r\n    provider: \"proveedor\",\r\n    brand: \"marca\",\r\n    quantity: \"cantidad\",\r\n    price: \"precio\",\r\n    stock: \"stock\",\r\n    expirationDate: \"fecha de expiraciÃ³n\",\r\n    status: \"status\",\r\n  };\r\n  const getStatus = (item) => {\r\n    if (item.stock < item.minimumQuantity) {\r\n      return (\r\n        <CButton color=\"danger\">\r\n          {\" \"}\r\n          {item.stock === 0 ? \"Agotado\" : \"Insuficiente\"}{\" \"}\r\n        </CButton>\r\n      );\r\n    } else {\r\n      return <CButton color=\"success\">Disponible</CButton>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CCard>\r\n      <CFormInput\r\n        type=\"text\"\r\n        placeholder=\"Buscar...\"\r\n        value={searchTerm}\r\n        onChange={handleSearchChange}\r\n        className=\"mb-3\"\r\n      />\r\n      <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\r\n        <CTableHead className=\"text-nowrap\">\r\n          <CTableRow>\r\n            {[\r\n              \"label\",\r\n              \"provider\",\r\n              \"brand\",\r\n              \"quantity\",\r\n              \"price\",\r\n              \"stock\",\r\n              \"expirationDate\",\r\n              \"status\",\r\n            ].map((header, index) => (\r\n              <CTableHeaderCell\r\n                key={index}\r\n                className=\"bg-body-tertiary text-center\"\r\n                onClick={() => handleSort(header)}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                {translations[header].charAt(0).toUpperCase() +\r\n                  translations[header].slice(1)}\r\n                {sortConfig.key === header\r\n                  ? sortConfig.direction === \"ascending\"\r\n                    ? \" ð¼\"\r\n                    : \" ð½\"\r\n                  : null}\r\n              </CTableHeaderCell>\r\n            ))}\r\n          </CTableRow>\r\n        </CTableHead>\r\n        <CTableBody>\r\n          {currentItems.map((item, index) => (\r\n            <CTableRow key={index}>\r\n              <CTableDataCell className=\"text-center\">\r\n                {item.label}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                {item.provider}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                {item.brand || \"Generica\"}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                {item.quantity} {item.type || \"\"}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                ${item.price}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                {item.stock} {item.type || \"\"}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                {item.expirationDate}\r\n              </CTableDataCell>\r\n              <CTableDataCell className=\"text-center\">\r\n                {getStatus(item)}\r\n              </CTableDataCell>\r\n            </CTableRow>\r\n          ))}\r\n        </CTableBody>\r\n      </CTable>\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        onPageChange={handlePageChange}\r\n      />\r\n    </CCard>\r\n  );\r\n};\r\n\r\nexport default Consumables;\r\n","import React from 'react'\r\nimport Consumables from '../../components/consumables/Consumables'\r\nimport Banner from '../../components/Banner'\r\n\r\nconst ConsumablesView = () => {\r\n  return ( <>\r\n\r\n    <Banner text=\"Insumos\"/>\r\n              <Consumables />\r\n  </>\r\n  )\r\n}\r\n\r\nexport default ConsumablesView","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâs themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUIâs themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n"],"names":["_ref","text","_jsx","className","children","currentPage","totalPages","onPageChange","_jsxs","classes","onClick","disabled","Array","map","_","index","Consumables","data","setData","useState","setCurrentPage","itemsPerPage","searchTerm","setSearchTerm","sortConfig","setSortConfig","key","direction","useEffect","consumablesData","filteredData","filter","item","name","toLowerCase","includes","provider","sortedData","sort","a","b","indexOfLastItem","indexOfFirstItem","currentItems","slice","Math","ceil","length","translations","label","brand","quantity","price","stock","expirationDate","status","getStatus","minimumQuantity","CButton","color","CCard","CFormInput","type","placeholder","value","onChange","event","target","CTable","align","hover","responsive","CTableHead","CTableRow","header","CTableHeaderCell","handleSort","style","cursor","charAt","toUpperCase","CTableBody","CTableDataCell","Pagination","pageNumber","ConsumablesView","_Fragment","Banner","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName"],"sourceRoot":""}