{"version":3,"file":"static/js/7040.6266a428.chunk.js","mappings":"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","sources":["components/recipes/RecipeBanner.js","webpack://unstock---front/./src/components/recipes/recipeCard.module.css?27e8","components/recipes/RecipeCard.js","webpack://unstock---front/./src/components/recipes/RecipesGrid.module.css?ed20","components/recipes/RecipeGrid.js","components/recipes/RecipeModal.js","components/recipes/Recipes.js","views/base/recipes/Recipes.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React from 'react'\r\nimport { CCardBody, CCardHeader, CRow ,CCol} from \"@coreui/react\";\r\n\r\nconst RecipeBanner = (props) => {\r\n    const { name, image, sell, type, ingredients, recipe } = props.recipe;\r\n  return (\r\n    <>\r\n    <CCardHeader>\r\n      <h5 className=\"text-center\">{name}</h5>\r\n    </CCardHeader>\r\n  <CCardBody>\r\n    <CRow className=\"justify-content-center\">\r\n      <CCol xs=\"auto\" className=\"text-center\">\r\n        <img  style={{maxHeight:\"40vh\", maxWidth:\"300px\"}}  src={image} alt={name}/>\r\n      </CCol>\r\n      <CCol>\r\n        <CRow>\r\n          <h5>Descripci√≥n</h5>\r\n          <p>\r\n            Venta: {sell} {type}\r\n          </p>\r\n          <p>\r\n            Rendimiento de Receta: {sell} {type}\r\n          </p>\r\n        </CRow>\r\n        <CRow>\r\n          <CCol>\r\n            <h5>Ingredientes</h5>\r\n            <ul className=\"mx-5\">\r\n              {ingredients.map((ingredient, i) => (\r\n                <li key={i}>\r\n                  {ingredient.quantity} {ingredient.measure} de {ingredient.ingredient}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <h5>Receta</h5>\r\n          <p>{recipe}</p>\r\n        </CRow>\r\n      </CCol>\r\n    </CRow> \r\n  </CCardBody>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default RecipeBanner","// extracted by mini-css-extract-plugin\nexport default {\"recipeImage\":\"recipeCard_recipeImage__UlvYo\"};","import { CCardBody, CRow, CCol, CButton, CCardHeader, CCardFooter } from \"@coreui/react\";\r\nimport classes from './recipeCard.module.css'\r\n\r\nconst RecipeCard = (props) => {\r\n  const { name, image  } = props.recipe;\r\n\r\n  return ( \r\n   \r\n        <div onClick={props.handleShowMore} >\r\n        <CCardHeader className=\"text-center\">{name}</CCardHeader>\r\n        <CCardBody>\r\n        <CRow className=\"p-1 justify-content-center align-items-center\" >\r\n          <CCol xs=\"auto\"  >\r\n            <img src={image} alt={name}  className={`${classes.recipeImage}  `} />\r\n            \r\n           \r\n          </CCol>\r\n        </CRow>\r\n        </CCardBody>\r\n        <CCardFooter className=\"p-3 text-center\" > <CButton color=\"info\">Mostrar M√°s</CButton></CCardFooter>\r\n      </div>\r\n       \r\n  );\r\n};\r\n\r\nexport default RecipeCard;","// extracted by mini-css-extract-plugin\nexport default {\"cardHeight\":\"RecipesGrid_cardHeight__zIZxe\",\"plusButton\":\"RecipesGrid_plusButton__pv6bp\"};","import React from 'react'\r\nimport {\r\n    CRow,\r\n    CCol,\r\n    CCard,\r\n    CButton, \r\n  } from \"@coreui/react\";\r\n  import RecipeCard from \"./RecipeCard\";\r\n  import CIcon from \"@coreui/icons-react\";\r\n  import { cilPlus } from \"@coreui/icons\";\r\n  import classes from \"./RecipesGrid.module.css\";\r\n\r\nconst RecipeGrid = (props) => {\r\n  return (\r\n    <CRow className={`${classes.cardHeight} overflow-auto mb-2`}>\r\n    <CCol\r\n        xs=\"12\"\r\n        sm=\"6\"\r\n        md=\"4\"\r\n        className=\"d-flex justify-content-center mb-4\"\r\n      >\r\n        <CCard className=\"w-100 text-center\" style={{minHeight:\"20vh\"}}  onClick={props.openModal}>\r\n        <CButton className=\"w-50 position-absolute top-50 start-50 translate-middle\" >\r\n          <CIcon icon={cilPlus} size=\"3xl\"/><p>\r\n            A√±adir Receta\r\n          </p>\r\n        </CButton>\r\n        </CCard>\r\n      </CCol>\r\n    {props.filteredData.map((recipe, index) => (\r\n      <CCol\r\n        key={index}\r\n        xs=\"12\"\r\n        sm=\"6\"\r\n        md=\"4\"\r\n        className=\"d-flex justify-content-center mb-4\"\r\n      >\r\n        <CCard className=\"w-100\">\r\n          <RecipeCard\r\n            recipe={recipe} \r\n            handleShowMore={() => props.handleShowMore(index)} \r\n          />\r\n        </CCard>\r\n      </CCol>\r\n    ))}      \r\n      \r\n  </CRow>\r\n  )\r\n}\r\n\r\nexport default RecipeGrid","import React, { useState } from 'react'\r\nimport { CButton, CForm, CFormInput, CFormLabel, CFormTextarea, CModal, CModalBody, CModalFooter, CModalHeader,CDropdownMenu, CDropdown, CDropdownToggle, CDropdownItem } from '@coreui/react'\r\n\r\nconst RecipeModal = (props) => {\r\n    const [medida, setMedida] = useState(\"\")\r\n    const options = [\r\n    {\r\n      value: \"gr\",\r\n      label: 'Gramos',\r\n    },\r\n    {\r\n      value: \"ml\",\r\n      label: 'Mililitros',\r\n    },\r\n    {\r\n      value: \"piezas\",\r\n      label: 'Piezas',\r\n    }, \r\n \r\n  ] \r\n  const handleMeasure=(measure)=>{\r\n    setMedida(measure)\r\n  }\r\n  return (\r\n    <CModal\r\n    alignment=\"center\"\r\n    scrollable\r\n    visible={props.visible}\r\n    onClose={() => props.closeModal()}\r\n    aria-labelledby=\"Carro\"\r\n  >\r\n  <CModalHeader>\r\n      Productos\r\n  </CModalHeader>\r\n  <CModalBody>\r\n  <CForm>\r\n  <div className=\"mb-3\">\r\n    <CFormLabel htmlFor=\"name\">Nombre</CFormLabel>\r\n    <CFormInput type=\"text\"   id=\"name\" placeholder=\"Nombre\"/>\r\n  </div>\r\n  <div className=\"mb-3\">\r\n    <CFormLabel htmlFor=\"sell\">Venta:</CFormLabel>\r\n    <CFormInput type=\"text\"   id=\"sell\" placeholder=\"Ej. 2\"/>  <CDropdown>\r\n  <CDropdownToggle color=\"secondary\">{medida.length>0 ? medida:\"Medida\"}</CDropdownToggle>\r\n  <CDropdownMenu>\r\n  {options.map(option => (<CDropdownItem onClick={()=>{handleMeasure(option.value)}} >{option.label}</CDropdownItem>)) }\r\n  </CDropdownMenu>\r\n</CDropdown>\r\n  </div> \r\n\r\n  <div className=\"mb-3\">\r\n    <CFormLabel htmlFor=\"recipe\">Receta</CFormLabel>\r\n    <CFormTextarea id=\"recipe\" rows={3}></CFormTextarea>\r\n  </div>\r\n</CForm>\r\n  </CModalBody>\r\n  <CModalFooter>\r\n      <CButton color=\"secondary\" onClick={() => props.closeModal()}>\r\n      Cerrar\r\n      </CButton> \r\n    </CModalFooter>\r\n          \r\n  </CModal>\r\n  )\r\n}\r\n\r\nexport default RecipeModal","import React, { useEffect, useState } from \"react\";\r\nimport recipeExample from \"../../assets/recipes.json\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport RecipeBanner from \"./RecipeBanner\";\r\nimport RecipeGrid from \"./RecipeGrid\";\r\nimport RecipeModal from \"./RecipeModal\";\r\n\r\nconst Recipes = () => {\r\n  const [data, setData] = useState([]);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [showIndex, setShowIndex] = useState(null);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const handleShowMore = (index) => {\r\n    setShowIndex(index);\r\n  };\r\n\r\n  const openModal = () => {\r\n    setModalOpen(true);\r\n  };\r\n  const closeModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    console.log(recipeExample.recipes);\r\n    setData(recipeExample.recipes);\r\n  }, []);\r\n\r\n  const handleSearch = (ev) => {\r\n    setSearchInput(ev.target.value);\r\n  };\r\n  const filteredData = data.filter((item) =>\r\n    item.name.toLowerCase().includes(searchInput.toLowerCase())\r\n  );\r\n  \r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Buscar receta\"\r\n        value={searchInput}\r\n        onChange={handleSearch}\r\n        className=\"mb-2\"\r\n      />\r\n\r\n      <RecipeGrid\r\n        handleShowMore={handleShowMore}\r\n        filteredData={filteredData}\r\n        openModal={openModal}\r\n      />\r\n      <RecipeModal visible={isModalOpen} \r\n        closeModal={closeModal}\r\n      />\r\n      {showIndex != null && (\r\n        <CCard>\r\n          <RecipeBanner recipe={data[showIndex]} />\r\n        </CCard>\r\n      )}\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Recipes;\r\n","import React from 'react'\r\nimport RecipesComponent from '../../../components/recipes/Recipes'\r\n\r\nconst Recipes = () => {\r\n  return (\r\n    <div>\r\n        <RecipesComponent/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Recipes","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI‚Äôs themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI‚Äôs themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (‚â•1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (‚â•1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["props","name","image","sell","type","ingredients","recipe","_jsxs","_Fragment","children","_jsx","CCardHeader","className","CCardBody","CRow","CCol","xs","style","maxHeight","maxWidth","src","alt","map","ingredient","i","quantity","measure","onClick","handleShowMore","classes","CCardFooter","CButton","color","sm","md","CCard","minHeight","openModal","CIcon","icon","cilPlus","size","filteredData","index","RecipeCard","medida","setMedida","useState","CModal","alignment","scrollable","visible","onClose","closeModal","CModalHeader","CModalBody","CForm","CFormLabel","htmlFor","CFormInput","id","placeholder","CDropdown","CDropdownToggle","length","CDropdownMenu","value","label","option","CDropdownItem","CFormTextarea","rows","CModalFooter","Recipes","data","setData","searchInput","setSearchInput","showIndex","setShowIndex","isModalOpen","setModalOpen","useEffect","console","log","recipeExample","filter","item","toLowerCase","includes","onChange","ev","target","RecipeGrid","RecipeModal","RecipeBanner","RecipesComponent","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","col","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}